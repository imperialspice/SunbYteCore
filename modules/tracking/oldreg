//
// Created by middleton on 8/19/22.
//

#include <cstdint>
#include <spidev_lib++.h>
#include <gpiod.hpp>
#include <string>
#include <vector>
#include <map>


#ifndef SUNBYTE_DRV8711_H
#define SUNBYTE_DRV8711_H

// this is the driver board for the pollou motor drivers in sunbyte
// using memory mapped IO or the GPIORpi library


/// Possible arguments to setStepMode().
enum class HPSDStepMode : uint16_t
{
    MicroStep256 =   0b1000,
    MicroStep128 =   0b0111,
    MicroStep64  =   0b0110,
    MicroStep32  =   0b0101,
    MicroStep16  =   0b0100,
    MicroStep8   =   0b0011,
    MicroStep4   =   0b0010,
    MicroStep2   =   0b0001,
    MicroStep1   =   0b0000,
};

/// Possible arguments to setDecayMode().
enum class HPSDDecayMode : uint8_t
{
    Slow                = 0b000,
    SlowIncMixedDec     = 0b001,
    Fast                = 0b010,
    Mixed               = 0b011,
    SlowIncAutoMixedDec = 0b100,
    AutoMixed           = 0b101,
};

/// Bits that are set in the return value of readStatus() to indicate status
/// conditions.
///
/// See the DRV8711 datasheet for detailed descriptions of these status
/// conditions.
struct HPSDStatusBit
{
    /// Overtemperature shutdown
    bool OTS = false;

    /// Channel A overcurrent shutdown
    bool AOCP = false;

    /// Channel B overcurrent shutdown
    bool BOCP = false;

    /// Channel A predriver fault
    bool APDF = false;

    /// Channel B predriver fault
    bool BPDF = false;

    /// Undervoltage lockout
    bool UVLO = false;

    /// Stall detected
    bool STD = false;

    /// Latched stall detect
    bool STDLAT = false;
};



// hold values
//void digitalWrite(int pin, int value){
//    // do nothing.
//}


class selectChip{
    gpiod::line chipSelect;
public:
    explicit selectChip(int chipPin){
//        digitalWrite(chipPin, 1);
        chipSelect = gpiod::chip().get_line(chipPin);
        chipSelect.set_direction_output(GPIOD_LINE_ACTIVE_STATE_HIGH);

    }
    ~selectChip(){
//        digitalWrite(this->chipPin, 0);
        chipSelect.set_value(GPIOD_LINE_ACTIVE_STATE_LOW);
    }
};

class drv8711 {


    // uses the SPIDEV library because honestly its easier.
    SPI *_spi;

    int shadowSet;
/* Copied from Pololu High Power Motor Driver */

    struct reg_maps {

        uint16_t ctrl_register ;
/*  0, Enable, 1, R/W, 0
 *  1, Direction, 1, R/W, 0
 *  2, RSTEP, 1, W, 0
 *  3, MODE, 4, R/W, 0
 *  7, EXSTALL, 1, R/W, 0
 *  8, ISGAIN, 2, R/W, 00
 *  10, DTIME, 2, R/W, 11
 *  12, UNUSED, 4,  - DO NOT WRITE
 */

        uint16_t torque_register  ;
/*  0, TORQUE, 8, R/W, 0xFF
 *  8, SMPLTH, 3, R/W, 001
 *  11, RESV, 1
 *  12, UNUSED, 4,  - DO NOT WRITE
 */

        uint16_t off_register  ;
/*  0, TOFF, 8, R/W, 0x80
 *  8, PWMMODE, 1, R/W, 0
 *  9-11, RESV, 3
 *  12, UNUSED, 4,  - DO NOT WRITE
 */


        uint16_t blank_register  ;
/*  0, TBLANK, 8, R/W, 0x80
 *  8, ARBT, 1, R/W, 0
 *  9-11, RESV, 3
 *  12, UNUSED, 4,  - DO NOT WRITE
 */

        uint16_t decay_register  ;
/*  0, TDECAY, 8, R/W, 0x40
 *  8, DECMOD, 3, R/W, 0
 *  11, RESV, 1
 *  12, UNUSED, 4,  - DO NOT WRITE
 */

        uint16_t stall_register  ;
/*  0, SDTHR, 8, R/W, 0x40
 *  8, SDCNT, 1, R/W, 0
 *  9-11, VDIV, 3
 *  12, UNUSED, 4,  - DO NOT WRITE
 */

        uint16_t drive_register  ;
/*  0, OCPTH, 2, R/W, 01
 *  2, OCPDEG, 2, R/W, 10
 *  4, TDRIVEN, 2, R/W, 01
 *  6, TDRIVEP, 2, R/W, 01
 *  8, IDRIVEN, 2, R/W, 10
 *  10, IDRIVEP, 2, R/W, 10
 *  12, UNUSED, 4,  - DO NOT WRITE
 */

        uint16_t status_register  ;
/*  0, OTS, 1, R/W, 0
 *  1, AOCP, 1, R/W, 0
 *  2, BOCP, 1, W, 0
 *  3, APDF, 1, R/W, 0
 *  4, BPDF, 1, R/W, 0
 *  5, UVLO, 1, R/W, 00
 *  6, STD, 1, R/W, 11,
 *  7, STDLAT, 1, R/W, 0
 *  8, RESV, 4,
 *  12, UNUSED, 4 - DO NOT WRITE
 */

    };

    std::map<int, reg_maps> registerMaps = {};
    enum struct reg_select : uint8_t;
    uint16_t buf_write = 0;
    uint16_t buf_read = 0;

    reg_maps defaultValues(){
        return reg_maps({0xC10, 0x1FF, 0x030, 0x080, 0x110, 0x040, 0xA59, 0});
    }

    void setDefaultValus(){

        registerMaps.at(shadowSet) = {0xC10, 0x1FF, 0x030, 0x080, 0x110, 0x040, 0xA59, 0};
    }

public:
    drv8711(const std::string& spidev, int ChipSelect){
        shadowSet = ChipSelect;
        _spi = new SPI(spidev.c_str());

        registerMaps.emplace(std::pair(ChipSelect, defaultValues()));


    }
// {0xC10, 0x1FF, 0x030, 0x080 ,0x110, 0x040, 0xA59, 0, 0}
    // a hack to ensure that even without chip selects the SPI library can write
    //void switchChip(int ChipSelectPin);

    drv8711(const std::string& spidev, spi_config_t *_config){
        _spi = new SPI(spidev.c_str(), _config);

    }
    ~drv8711(){
        delete _spi;
    }

    typedef struct {
        uint8_t mode;
        uint8_t bits_per_word;
        uint32_t speed;
        uint16_t delay;
    } spi_config_t;


    void write(int ChipSelect, reg_select reg, uint16_t value);

    uint16_t read(uint8_t ChipSelect, reg_select reg);


    void step();

    bool getDirection();

    void setDirection(bool direction);

    void disableDriver();

    void enableDriver();

    void setStepMode(HPSDStepMode step);

    void setTorque(uint16_t current_limit);

    void setDecayMode(HPSDDecayMode mode);

    HPSDStatusBit getStatus();

    HPSDStatusBit getFaults();

    void clearFaults();

    void clearStatus();

    void applySettings();

    bool verifySettings();

    void reset();

};

enum struct drv8711::reg_select : uint8_t {
    CTRL = 0x0,
    TORQUE = 0x01,
    OFF = 0x02,
    BLANK = 0x03,
    DECAY = 0x04,
    STALL = 0x05,
    DRIVE = 0x06,
    STATUS = 0x07
};



#endif //SUNBYTE_DRV8711_H


]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//
// Created by middleton on 8/19/22.
//

#include "drv8711.h"
#include <iostream>


void drv8711::write(int ChipSelect, drv8711::reg_select reg, uint16_t value) {
    selectChip chip(ChipSelect); // auto close on destruction
    uint16_t trans = ((((uint8_t) reg) & 0b111) << 12) | (((uint16_t)value) & 0xFFFF);
    std::cout << "Write: " << std::to_string(trans) << std::endl;
    _spi->write(reinterpret_cast<uint8_t *>(trans), 16);
}

uint16_t drv8711::read(uint8_t ChipSelect, drv8711::reg_select reg) {
    selectChip chip(ChipSelect);
    uint16_t recv =0;
    uint16_t tran = (0x8 | (((uint8_t)reg) & 0b111)) << 12;
    std::cout << "Read: " << std::to_string(tran) << std::endl;
    _spi->xfer(reinterpret_cast<uint8_t *>(tran), 16, reinterpret_cast<uint8_t *>(recv), 16);
    return recv;
}

void drv8711::enableDriver() {
    registerMaps.at(shadowSet).ctrl_register |= (1 << 0);
    write(shadowSet, reg_select::CTRL, registerMaps.at(shadowSet).ctrl_register);

}

void drv8711::disableDriver() {
    registerMaps.at(shadowSet).ctrl_register &= ~(1 << 0);
    write(shadowSet, reg_select::CTRL, registerMaps.at(shadowSet).ctrl_register);
}

/*
 *  direction: true for forward, false for backward
 *
 */
void drv8711::setDirection(bool direction = false){
    if(direction){
        registerMaps.at(shadowSet).ctrl_register  |= (1 << 1);
    }
    else{
        registerMaps.at(shadowSet).ctrl_register &= ~(1 << 1);
    }
    write(shadowSet, reg_select::CTRL, registerMaps.at(shadowSet).ctrl_register);
}

bool drv8711::getDirection(){
    return registerMaps.at(shadowSet).ctrl_register >> 1 & 1;
}

void drv8711::step(){
    this->write(shadowSet, reg_select::CTRL, registerMaps.at(shadowSet).ctrl_register | (1 << 2));
}

void drv8711::setStepMode( HPSDStepMode step = HPSDStepMode::MicroStep4){
    registerMaps.at(shadowSet).ctrl_register =
            (registerMaps.at(shadowSet).ctrl_register & 0b111110000111) | (((uint8_t) step) << 3);

    this->write(shadowSet, reg_select::CTRL, registerMaps.at(0).ctrl_register);
}

void drv8711::setTorque( uint16_t current_limit){
    current_limit = (current_limit > 8000) ? 8000:current_limit;
    uint8_t isgainBits = 0b11;
    uint16_t torqueBits = ((uint32_t)768  * current_limit) / 6875;

    // Halve the gain and TORQUE until the TORQUE value fits in 8 bits.
    while (torqueBits > 0xFF)
    {
        isgainBits--;
        torqueBits >>= 1;
    }

    registerMaps.at(shadowSet).ctrl_register =
            (registerMaps.at(shadowSet).ctrl_register & 0b110011111111) | (isgainBits << 8);
    registerMaps.at(shadowSet).torque_register =
            (registerMaps.at(shadowSet).torque_register & 0b111100000000) | torqueBits;

    write(shadowSet, reg_select::CTRL, registerMaps.at(shadowSet).ctrl_register);
    write(shadowSet, reg_select::TORQUE, registerMaps.at(shadowSet).torque_register);
}

void drv8711::setDecayMode(HPSDDecayMode mode){
    registerMaps.at(shadowSet).decay_register =
            (registerMaps.at(shadowSet).decay_register & 0b00011111111) | (((uint8_t)mode & 0b111) << 8);
    write(shadowSet, reg_select::DECAY, registerMaps.at(shadowSet).decay_register);
}

HPSDStatusBit drv8711::getStatus(){
    uint16_t rd = read(shadowSet, reg_select::STATUS);
    registerMaps.at(shadowSet).status_register = rd;
    HPSDStatusBit tn;
    tn.OTS = rd >> 0;
    tn.AOCP = rd >> 1;
    tn.BOCP = rd >> 2;
    tn.APDF = rd >> 3;
    tn.BPDF = rd >> 4;
    tn.UVLO = rd >> 5;
    tn.STD = rd >> 6;
    tn.STDLAT = rd >> 7;
    return tn;
}

HPSDStatusBit drv8711::getFaults(){
    return getStatus();
}

void drv8711::clearFaults(){
    registerMaps.at(shadowSet).status_register = ~0b00111111;
    write(shadowSet, reg_select::STATUS, registerMaps.at(shadowSet).status_register);
}
void drv8711::clearStatus(){
    registerMaps.at(shadowSet).status_register = 0;
    write(shadowSet, reg_select::STATUS, registerMaps.at(shadowSet).status_register);
}

void drv8711::applySettings(){
    write(shadowSet, reg_select::CTRL, registerMaps.at(shadowSet).ctrl_register);
    write(shadowSet, reg_select::STATUS, registerMaps.at(shadowSet).status_register);
    write(shadowSet, reg_select::DECAY, registerMaps.at(shadowSet).decay_register);
    write(shadowSet, reg_select::TORQUE, registerMaps.at(shadowSet).torque_register);
    write(shadowSet, reg_select::BLANK, registerMaps.at(shadowSet).blank_register);
    write(shadowSet, reg_select::DRIVE, registerMaps.at(shadowSet).drive_register);
    write(shadowSet, reg_select::OFF, registerMaps.at(shadowSet).off_register);
    write(shadowSet, reg_select::STALL, registerMaps.at(shadowSet).stall_register);
}

bool drv8711::verifySettings(){
    return
                    read(shadowSet, reg_select::CTRL) == registerMaps.at(shadowSet).ctrl_register &&
                    read(shadowSet, reg_select::TORQUE) == registerMaps.at(shadowSet).torque_register &&
                    read(shadowSet, reg_select::OFF) == registerMaps.at(shadowSet).off_register &&
                    read(shadowSet, reg_select::BLANK) == registerMaps.at(shadowSet).blank_register &&
                    read(shadowSet, reg_select::DECAY) == registerMaps.at(shadowSet).decay_register &&
                    read(shadowSet, reg_select::STALL) == registerMaps.at(shadowSet).stall_register &&
                    read(shadowSet, reg_select::DRIVE) == registerMaps.at(shadowSet).drive_register;

}

void drv8711::reset( ){
    defaultValues();
    applySettings();
}